openapi: 3.0.0
info:
  title: Auth Module API
  version: 1.0.0
  description: Authentication and authorization endpoints for user management, API keys, and sessions
paths:
  # API Key Management
  /v1/api-keys/create:
    post:
      summary: Create new API key
      description: Creates a new API key for the authenticated user
      tags:
        - API Keys
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/api-keys/revoke:
    delete:
      summary: Revoke API key
      description: Revokes an API key based on its prefix
      tags:
        - API Keys
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeApiKeyRequest'
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeApiKeyResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/api-keys:
    get:
      summary: List API keys
      description: Lists all API keys for the authenticated user
      tags:
        - API Keys
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of keys to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of keys to skip
        - in: query
          name: includeRevoked
          schema:
            type: boolean
            default: false
          description: Include revoked keys in results
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Profile Management
  /v1/profile:
    get:
      summary: Get user profile
      description: Retrieves the authenticated user's profile information
      tags:
        - Profile
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Updates the authenticated user's profile information
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user account
      description: Deletes the authenticated user's account
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountRequest'
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccountResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Session Management
  /v1/sessions/login:
    post:
      summary: User login
      description: Authenticates a user and creates a new session
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/sessions/logout:
    delete:
      summary: User logout
      description: Revokes the current user session
      tags:
        - Sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/sessions:
    get:
      summary: List user sessions
      description: Lists all sessions for the authenticated user
      tags:
        - Sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSessionsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    # API Key Schemas
    CreateApiKeyRequest:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name for the API key
          example: "Production API Key"
        permissions:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 20
          description: List of permissions for the API key
          example: ["api-keys:read", "profile:read"]
        expiresIn:
          type: string
          description: Expiration time (e.g., '30d', '1y', 'never')
          example: "30d"
        metadata:
          type: object
          description: Additional metadata for the API key

    CreateApiKeyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        apiKey:
          type: string
          description: The generated API key (only shown once)
          example: "sk_test_abc123def456..."
        keyPrefix:
          type: string
          description: API key prefix for identification
          example: "sk_abc123"
        name:
          type: string
          example: "Production API Key"
        permissions:
          type: array
          items:
            type: string
          example: ["api-keys:read", "profile:read"]
        expiresAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time

    RevokeApiKeyRequest:
      type: object
      required:
        - keyPrefix
      properties:
        keyPrefix:
          type: string
          minLength: 8
          maxLength: 8
          description: Prefix of the API key to revoke
          example: "sk_abc123"
        reason:
          type: string
          maxLength: 500
          description: Reason for revocation
          example: "Security compromise"
        notifyUser:
          type: boolean
          description: Whether to notify user about revocation
          default: false

    RevokeApiKeyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        keyPrefix:
          type: string
          example: "sk_abc123"
        revokedAt:
          type: string
          format: date-time
        message:
          type: string
          example: "API key revoked successfully"
        timestamp:
          type: string
          format: date-time

    ListApiKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
        timestamp:
          type: string
          format: date-time

    ApiKeyInfo:
      type: object
      properties:
        id:
          type: string
        prefix:
          type: string
          example: "sk_abc123"
        name:
          type: string
          example: "Production API Key"
        permissions:
          type: array
          items:
            type: string
          example: ["api-keys:read", "profile:read"]
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
        revokedAt:
          type: string
          format: date-time
          nullable: true
        revokedReason:
          type: string
          nullable: true

    # Profile Schemas
    GetProfileResponse:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
        timestamp:
          type: string
          format: date-time

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar_url:
          type: string
          format: uri
          nullable: true
        role:
          type: string
          enum: [admin, user, readonly]
        permissions:
          type: array
          items:
            type: string
        metadata:
          type: object
        subscription:
          type: object
          nullable: true
          properties:
            status:
              type: string
            plan:
              type: string
            expiresAt:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        avatar_url:
          type: string
          format: uri
        metadata:
          type: object
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, system]
            language:
              type: string
              minLength: 2
              maxLength: 2
            timezone:
              type: string
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                push:
                  type: boolean
                marketing:
                  type: boolean

    UpdateProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        profile:
          $ref: '#/components/schemas/UserProfile'
        message:
          type: string
          example: "Profile updated successfully"
        timestamp:
          type: string
          format: date-time

    DeleteAccountRequest:
      type: object
      required:
        - confirmEmail
      properties:
        confirmEmail:
          type: string
          format: email
          description: Email address to confirm account deletion
        reason:
          type: string
          maxLength: 500
          description: Reason for account deletion
        deleteData:
          type: boolean
          description: Whether to delete all user data
          default: false

    DeleteAccountResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Account deletion completed successfully"
        timestamp:
          type: string
          format: date-time

    # Session Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          minLength: 1
          description: User password
        rememberMe:
          type: boolean
          description: Whether to create a long-lived session
          default: false
        deviceInfo:
          type: object
          properties:
            name:
              type: string
              description: Device name
            type:
              type: string
              description: Device type
            browser:
              type: string
              description: Browser name
            os:
              type: string
              description: Operating system

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        session:
          type: object
          properties:
            id:
              type: string
              description: Session ID
            accessToken:
              type: string
              description: JWT access token
            refreshToken:
              type: string
              description: JWT refresh token
            expiresAt:
              type: string
              format: date-time
              description: Token expiration time
            user:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                email:
                  type: string
                  format: email
                name:
                  type: string
                role:
                  type: string
        message:
          type: string
          example: "Login successful"
        timestamp:
          type: string
          format: date-time

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Session revoked successfully"
        timestamp:
          type: string
          format: date-time

    ListSessionsResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionInfo'
        count:
          type: integer
          description: Total number of sessions
        timestamp:
          type: string
          format: date-time

    SessionInfo:
      type: object
      properties:
        id:
          type: string
          description: Session ID
        userId:
          type: string
          format: uuid
        userEmail:
          type: string
          format: email
        userRole:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        lastAccessedAt:
          type: string
          format: date-time
        ipAddress:
          type: string
          nullable: true
        userAgent:
          type: string
          nullable: true
        deviceInfo:
          type: object
          nullable: true
          properties:
            name:
              type: string
            type:
              type: string
            browser:
              type: string
            os:
              type: string
        isActive:
          type: boolean
        isCurrent:
          type: boolean
          description: Whether this is the current session

    # Common Schemas
    Pagination:
      type: object
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        total:
          type: integer
          example: 100
        hasMore:
          type: boolean
          example: true