// Type definitions for YouTube module

/**
 * YouTube video metadata from YouTube Data API v3
 */
export interface YouTubeVideoMetadata {
  videoId: string;
  title: string;
  description?: string;
  channelId: string;
  channelName: string;
  publishedAt: string;
  duration: string; // ISO 8601 duration (e.g., "PT4M13S")
  durationSeconds: number;
  thumbnails: {
    default?: { url: string; width: number; height: number };
    medium?: { url: string; width: number; height: number };
    high?: { url: string; width: number; height: number };
    standard?: { url: string; width: number; height: number };
    maxres?: { url: string; width: number; height: number };
  };
  statistics?: {
    viewCount?: number;
    likeCount?: number;
    commentCount?: number;
  };
  tags?: string[];
  categoryId?: string;
  defaultLanguage?: string;
  defaultAudioLanguage?: string;
}

/**
 * Request body for analyze video endpoint
 */
export interface AnalyzeVideoRequest {
  videoUrl: string;
  userId?: string; // Optional for public API, required for user-specific features
  options?: {
    includeStatistics?: boolean;
    includeTags?: boolean;
    cacheResult?: boolean;
  };
}

/**
 * Response from analyze video endpoint
 */
export interface AnalyzeVideoResponse {
  success: boolean;
  data?: {
    video: YouTubeVideoMetadata;
    cached: boolean;
    processedAt: string;
  };
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

/**
 * YouTube API error codes
 */
export enum YouTubeErrorCode {
  INVALID_URL = 'YOUTUBE_INVALID_URL',
  VIDEO_NOT_FOUND = 'YOUTUBE_VIDEO_NOT_FOUND',
  VIDEO_PRIVATE = 'YOUTUBE_VIDEO_PRIVATE',
  VIDEO_DELETED = 'YOUTUBE_VIDEO_DELETED',
  API_QUOTA_EXCEEDED = 'YOUTUBE_API_QUOTA_EXCEEDED',
  API_ERROR = 'YOUTUBE_API_ERROR',
  NETWORK_ERROR = 'YOUTUBE_NETWORK_ERROR',
  RATE_LIMIT_EXCEEDED = 'YOUTUBE_RATE_LIMIT_EXCEEDED',
}

/**
 * YouTube API response types
 */
export interface YouTubeAPIVideoListResponse {
  kind: string;
  etag: string;
  pageInfo: {
    totalResults: number;
    resultsPerPage: number;
  };
  items: YouTubeAPIVideoItem[];
}

export interface YouTubeAPIVideoItem {
  kind: string;
  etag: string;
  id: string;
  snippet?: {
    publishedAt: string;
    channelId: string;
    title: string;
    description: string;
    thumbnails: Record<string, {
      url: string;
      width: number;
      height: number;
    }>;
    channelTitle: string;
    tags?: string[];
    categoryId: string;
    defaultLanguage?: string;
    defaultAudioLanguage?: string;
  };
  contentDetails?: {
    duration: string;
    dimension: string;
    definition: string;
    caption: string;
  };
  statistics?: {
    viewCount: string;
    likeCount?: string;
    dislikeCount?: string;
    favoriteCount: string;
    commentCount?: string;
  };
  status?: {
    uploadStatus: string;
    privacyStatus: string;
    license: string;
    embeddable: boolean;
    publicStatsViewable: boolean;
  };
}

/**
 * Transcript types (for future implementation)
 */
export interface TranscriptSegment {
  start: number; // Start time in seconds
  duration: number; // Duration in seconds
  text: string; // Transcript text
}

export interface VideoTranscript {
  videoId: string;
  language: string;
  segments: TranscriptSegment[];
  isAutoGenerated: boolean;
  totalDuration: number;
}

/**
 * Database types for YouTube tables
 */
export interface YouTubeVideoRecord {
  id: string;
  video_id: string;
  title: string;
  description?: string;
  channel_id: string;
  channel_name: string;
  published_at: string;
  duration_seconds: number;
  thumbnail_url?: string;
  view_count?: number;
  like_count?: number;
  metadata?: Record<string, any>;
  created_at: string;
  updated_at: string;
  last_refreshed_at?: string;
}

export interface UserVideoHistory {
  id: string;
  user_id: string;
  video_id: string;
  last_watched_at: string;
  progress_seconds: number;
  is_bookmarked: boolean;
  created_at: string;
  updated_at: string;
}

/**
 * Transcript extraction request
 */
export interface ExtractTranscriptRequest {
  videoId: string;
  language?: string; // ISO 639-1 code (e.g., 'en', 'vi')
  options?: {
    preferAutoGenerated?: boolean;
    includeTimestamps?: boolean;
  };
}

/**
 * Transcript extraction response
 */
export interface ExtractTranscriptResponse {
  success: boolean;
  data?: {
    videoId: string;
    language: string;
    languageName: string;
    isAutoGenerated: boolean;
    segments: TranscriptSegment[];
    totalDuration: number;
    segmentCount: number;
    characterCount: number;
    processedAt: string;
  };
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

/**
 * Available transcript language
 */
export interface TranscriptLanguage {
  code: string; // e.g., 'en', 'vi'
  name: string; // e.g., 'English', 'Vietnamese'
  isAutoGenerated: boolean;
  isTranslatable: boolean;
}

/**
 * List available transcripts response
 */
export interface ListTranscriptsResponse {
  success: boolean;
  data?: {
    videoId: string;
    languages: TranscriptLanguage[];
    hasTranscripts: boolean;
  };
  error?: {
    code: string;
    message: string;
  };
}

/**
 * Video history management types
 */
export interface VideoHistoryEntry {
  historyId: string;
  videoId: string;
  videoTitle: string;
  channelName: string;
  thumbnailUrl?: string;
  durationSeconds: number;
  progressSeconds: number;
  completed: boolean;
  isBookmarked: boolean;
  lastWatchedAt: string;
  watchCount?: number;
  playbackRate?: number;
  notes?: string;
  tags?: string[];
}

/**
 * Add video to history request
 */
export interface AddToHistoryRequest {
  videoId: string;
  progressSeconds?: number;
  playbackRate?: number;
}

/**
 * Update history progress request
 */
export interface UpdateProgressRequest {
  progressSeconds: number;
  completed?: boolean;
  playbackRate?: number;
}

/**
 * Update bookmark request
 */
export interface UpdateBookmarkRequest {
  isBookmarked: boolean;
  notes?: string;
  tags?: string[];
}

/**
 * List history request parameters
 */
export interface ListHistoryParams {
  limit?: number;
  offset?: number;
  filter?: 'all' | 'bookmarked' | 'completed' | 'in-progress';
  sortBy?: 'recent' | 'alphabetical' | 'duration';
}

/**
 * History list response
 */
export interface ListHistoryResponse {
  success: boolean;
  data?: {
    history: VideoHistoryEntry[];
    total: number;
    hasMore: boolean;
  };
  error?: {
    code: string;
    message: string;
  };
}

/**
 * History operation response
 */
export interface HistoryOperationResponse {
  success: boolean;
  data?: {
    message: string;
    historyId?: string;
    videoId?: string;
  };
  error?: {
    code: string;
    message: string;
  };
}