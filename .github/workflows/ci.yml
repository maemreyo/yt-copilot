# Comprehensive CI pipeline with parallel jobs, security scanning, and quality gates

name: 🧪 Continuous Integration

on:
  pull_request:
    branches: ['main', 'develop']
  push:
    branches: ['main', 'develop']
  workflow_dispatch: # Allow manual triggers

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # CODE QUALITY & LINTING
  # ============================================================================
  quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Generate API documentation
        run: pnpm docs:generate

      - name: 🧹 Check code formatting
        run: pnpm format:check

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 🏗️ Type checking
        run: pnpm typecheck

      - name: 📊 Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-results
          path: |
            eslint-report.json
            docs/generated/
          retention-days: 7

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build project
        run: pnpm build:backend

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

      - name: 🔐 Run npm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: 🛡️ Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:unit --reporter=verbose --reporter=json --outputFile=unit-test-results.json

      - name: 📊 Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: unit-test-results.json
          retention-days: 7

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: supabase/postgres:15.1.0.117
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🚀 Start Supabase local development
        run: |
          supabase start --ignore-health-check
          sleep 10  # Wait for services to be ready

      - name: 🏗️ Build backend modules
        run: pnpm build:backend

      - name: 🌱 Seed development data
        run: pnpm db:seed:dev

      - name: 🧪 Run integration tests
        run: pnpm test:integration:backend --reporter=verbose --reporter=json --outputFile=integration-test-results.json
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
          SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
          STRIPE_SECRET_KEY: sk_test_mock_key_for_integration_tests
          NODE_ENV: test

      - name: 🔍 Run health check
        run: pnpm health:check

      - name: 📊 Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-results.json
            supabase/logs/
          retention-days: 7

      - name: 🧹 Stop Supabase
        if: always()
        run: supabase stop --no-backup

  # ============================================================================
  # BUILD VERIFICATION
  # ============================================================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build backend
        run: pnpm build:backend

      - name: 🏗️ Build all packages
        run: pnpm build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            supabase/_internal/
            docs/generated/
          retention-days: 3

  # ============================================================================
  # TEST COVERAGE
  # ============================================================================
  coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🚀 Start Supabase
        run: supabase start --ignore-health-check

      - name: 🏗️ Build backend
        run: pnpm build:backend

      - name: 🌱 Seed data
        run: pnpm db:seed:dev

      - name: 📊 Generate test coverage
        run: pnpm test:coverage
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
          SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📊 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: 🧹 Stop Supabase
        if: always()
        run: supabase stop --no-backup

  # ============================================================================
  # QUALITY GATE
  # ============================================================================
  quality-gate:
    name: 🚦 Quality Gate
    runs-on: ubuntu-latest
    needs: [quality, security, unit-tests, integration-tests, build, coverage]
    if: always()

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 🔍 Check job results
        run: |
          echo "=== CI Job Results ==="
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          
          # Check if any required job failed
          if [[ "${{ needs.quality.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed: One or more required checks failed"
            exit 1
          fi
          
          # Security and coverage are allowed to be skipped but not failed
          if [[ "${{ needs.security.result }}" == "failure" || 
                "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "⚠️  Quality gate warning: Security or coverage checks failed"
            echo "🚦 Proceeding with caution"
          fi
          
          echo "✅ Quality gate passed!"

      - name: 📊 Generate CI summary
        run: |
          echo "## 🧪 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.quality.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ Security Scan | ${{ needs.security.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Integration Tests | ${{ needs.integration-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Coverage | ${{ needs.coverage.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
